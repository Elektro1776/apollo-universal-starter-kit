extend type Query {
  permissions(
    ids: [ID]
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    offset: Int
    limit: Int
  ): [PermissionInfo]

  pagingPermissions(
    ids: [ID]
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    offset: Int
    limit: Int
  ): PagingPermissionResponse

  permission(id: ID!): PermissionInfo
}

extend type Mutation {
  createPermission(input: PermissionInput!): PermissionPayload!
  updatePermission(id: ID!, input: PermissionInput!): PermissionPayload!
  deletePermission(id: ID!): PermissionPayload!
}

extend type Subscription {
}

type PagingPermissionResponse {
  data: [PermissionInfo]
  total: Int
  pages: Int
}

type RoleInfo {
  createdAt: String
  updatedAt: String
  id: ID
  name: String
  roleId: ID
  roleName: String
  displayName: String
  description: String
  scopes: [String]
}

type PermissionInfo {
  createdAt: String
  updatedAt: String
  id: ID
  name: String

  permissionId: ID
  permissionName: String

  resource: String
  relation: String
  verb: String

  displayName: String
  description: String
}

input PermissionInput {
  name: String

  resource: String
  relation: String
  verb: String

  displayName: String
  description: String
}

type PermissionPayload {
  permission: PermissionInfo
  errors: [FieldError!]
}
