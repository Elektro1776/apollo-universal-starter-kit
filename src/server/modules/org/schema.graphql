extend type Query {
  # Get all orgs, possibly filtered and ordered
  orgs(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Org]

  pagingOrgs(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): PagingOrgsResponse

  # Get org by id
  org(id: String!): Org

  # search for users, some limit on context may occur
  searchOrgs(
    searchText: String!
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): SearchOrgsResponse
}

extend type Mutation {
  # Basic Org mutations
  addOrg(input: AddOrgInput!): OrgPayload!
  editOrg(input: EditOrgInput!): OrgPayload!
  deleteOrg(id: String!): OrgPayload!

  # Org membership
  addUserToOrg(orgId: String!, userId: String!): OrgPayload!
  removeUserFromOrg(orgId: String!, userId: String!): OrgPayload!
  addGroupToOrg(orgId: String!, groupId: String!): OrgPayload!
  removeGroupFromOrg(orgId: String!, groupId: String!): OrgPayload!
}

extend type Subscription {
}

#
# Org Extensions of Other Types
#

extend type User {
  orgs(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Org]
}

extend type Group {
  orgs(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Org]
}

#
# Org Types
#

type Org {
  createdAt: String
  updatedAt: String

  id: String!
  name: String!
  orgId: String!
  orgName: String!
  isActive: Boolean
  isPublic: Boolean

  urlName: String
  displayName: String
  locale: String

  profile: OrgProfile
  settings: OrgSettings

  groups(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Group]

  users(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [User]
}

type OrgProfile {
  createdAt: String
  updatedAt: String
  isPublic: Boolean

  domain: String
  displayName: String
  description: String
}

type OrgSettings {
  createdAt: String
  updatedAt: String
  isPublic: Boolean

  membershipIsOpen: Boolean
  membershipByRequest: Boolean
  membershipByInvite: Boolean
  membershipByDirect: Boolean

  memberlistIsPublic: Boolean

  grouplistIsPublic: Boolean
  groupmemberlistIsPublic: Boolean
}

type PagingOrgsResponse {
  results: [Org]
  count: Int
  pages: Int
  errors: [FieldError!]
}

type SearchOrgsResponse {
  results: [Org]
  count: Int
  pages: Int
  errors: [FieldError!]
}

type OrgPayload {
  org: Org
  errors: [FieldError!]
}

input AddOrgInput {
  name: String!

  profile: OrgProfileInput
}

input EditOrgInput {
  id: String!
  name: String
  isActive: Boolean

  profile: OrgProfileInput
}

input OrgProfileInput {
  domain: String
  displayName: String
  description: String
}
