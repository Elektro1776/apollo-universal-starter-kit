extend type Query {
  # Get all groups, possibly filtered and ordered
  groups(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Group]

  pagingGroups(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): PagingGroupsResponse

  # Get group by id
  group(id: String!): Group

  # search for users, some limit on context may occur
  searchGroups(
    searchText: String!
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): SearchGroupsResponse
}

extend type Mutation {
  # Basic Group mutations
  addGroup(input: AddGroupInput!): GroupPayload!
  editGroup(input: EditGroupInput!): GroupPayload!
  deleteGroup(id: String!): GroupPayload!

  #Ã¾R Group membership
  addUserToGroup(groupId: String!, userId: String!): GroupPayload!
  removeUserFromGroup(groupId: String!, userId: String!): GroupPayload!
}

extend type Subscription {
}

#
# Group Extensions of Other Types
#

extend type User {
  groups(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [Group]
}

#
# Group Types
#

type Group {
  createdAt: String
  updatedAt: String

  id: String!
  name: String!
  groupId: String!
  groupName: String!
  isActive: Boolean
  isPublic: Boolean

  urlName: String
  displayName: String
  locale: String

  profile: GroupProfile
  settings: GroupSettings

  users(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    page: Int
    offset: Int
    limit: Int
  ): [User]
}

type GroupProfile {
  createdAt: String
  updatedAt: String
  isPublic: Boolean

  description: String
}

type GroupSettings {
  createdAt: String
  updatedAt: String
  isPublic: Boolean

  membershipIsOpen: Boolean
  membershipByRequest: Boolean
  membershipByInvite: Boolean
  membershipByDirect: Boolean

  memberlistIsPublic: Boolean
}

type PagingGroupsResponse {
  results: [Group]
  count: Int
  pages: Int
  errors: [FieldError!]
}

type SearchGroupsResponse {
  results: [User]
  count: Int
  pages: Int
  errors: [FieldError!]
}

type GroupPayload {
  group: Group
  errors: [FieldError!]
}

input AddGroupInput {
  name: String!
  isPublic: Boolean

  urlName: String
  displayName: String
  locale: String

  profile: GroupProfileInput
  settings: GroupSettingsInput
}

input EditGroupInput {
  id: String!
  name: String
  isPublic: Boolean

  urlName: String
  displayName: String
  locale: String

  profile: GroupProfileInput
  settings: GroupSettingsInput
}

input GroupProfileInput {
  description: String
}

input GroupSettingsInput {
  membershipIsOpen: Boolean
  membershipByRequest: Boolean
  membershipByInvite: Boolean
  membershipByDirect: Boolean

  memberlistIsPublic: Boolean
}
